# This logstash config file configures logstash for forwarding
# log data for the listeners on the jupyter server to the
# AWS ElasticSearch service.

input {
  
  file {
    type => "syslog"
    path => "/var/log/syslog"
    #start_position => "beginning"
    #sincedb_path => "/dev/null"
  }

  file {
    type => "job-listener"
    #path => "/etc/logstash/conf.d/test.txt"
    path => "/home/ubuntu/cadre-job-listener/cadre_job_listener.log"
    #start_position => "beginning"
    #sincedb_path => "/dev/null"

    codec => multiline {
      patterns_dir => ["/etc/logstash/conf.d/patterns"]
      pattern => "^%{LISTENER_DATE}"
      negate => true
      what => "previous"
    }
  }

  file {
    type => "package-listener"
    #path => "/etc/logstash/conf.d/test.txt"
    path => "/home/ubuntu/cadre-job-listener/cadre_package_listener.log"
    #start_position => "beginning"
    #sincedb_path => "/dev/null"

    codec => multiline {
      patterns_dir => ["/etc/logstash/conf.d/patterns"]
      pattern => "^%{LISTENER_DATE}"
      negate => true
      what => "previous"
    }
  }

  file {
    type => "tool-listener"
    #path => "/etc/logstash/conf.d/test.txt"
    path => "/home/ubuntu/cadre-job-listener/cadre_tool_listener.log"
    #start_position => "beginning"
    #sincedb_path => "/dev/null"

    codec => multiline {
      patterns_dir => ["/etc/logstash/conf.d/patterns"]
      pattern => "^%{LISTENER_DATE}"
      negate => true
      what => "previous"
    }
  }

}

filter {

  if [type] == "syslog" {
    grok {
      # Parse the log message
      match => { "message" => "%{SYSLOGBASE} %{GREEDYDATA:message}" }
      # Use syslog_message created by the previous match instead of message
      overwrite => [ "message" ]
      # Remove unwanted information
      remove_field => ["pid", "host", "logsource", "path"]
    }

    date {
       # Use the time of the log message insted of the time LogStash parsed
       # the message.  Overwrite @timestamp which is the time LogStash parsed
       # the message.
       match => [ "timestamp", "MMM dd HH:mm:ss",
                 "MMM  d HH:mm:ss", "ISO8601" ]
       target => "@timestamp"
    }

    mutate {
      add_field => { "[@metadata][type]" => "%{type}" }
      # Remove the redundant time stamp, as it is now equal to @timestamp
      remove_field => [ "timestamp", "type", "tags", "@version" ]
    }
  } else if [type] in ["job-listener", "package-listener", "tool-listener"] {
    grok {
      patterns_dir => "/etc/logstash/conf.d/patterns"
      match => { "message" => "%{LISTENER_DATE:log_time} - %{DATA:component} - %{WORD:error_severity} - %{NONNEGINT:thread} - %{GREEDYDATA:message}" }
      # Use syslog_message created by the previous match instead of message
      overwrite => [ "message" ]
    }

    date {
      match => [ "log_time", "yyyy-MM-dd HH:mm:ss,SSS" ]
      timezone => "US/Eastern"
      target => "@timestamp"

      remove_field => ["log_time"]
    }

    # Remove useless information, redundant information, and status tags
    mutate {
      add_field => { "[@metadata][type]" => "%{type}" }
      remove_field => [ "path", "host", "type", "@version", "tags" ]
    }
  }

}

output {

  # For amazon_es, aws_access_key_id and aws_secret_access_key
  # are set by environment variables in /etc/default/logstash or
  # /etc/sysconfig/logstash which get read in by way of the logstash
  # daemon configuration file /etc/systemd/system/logstash.service.

  if [@metadata][type] == "syslog" {
    amazon_es {
      hosts => ["${LOGSTASH_AWS_ES_HOST}"]
      region => "${LOGSTASH_AWS_ES_REGION}"
      index => "alias-cadre-listener-syslog"
    }

    #stdout { codec => rubydebug }
 } else if [@metadata][type] == "job-listener" {
    amazon_es {
      hosts => ["${LOGSTASH_AWS_ES_HOST}"]
      region => "${LOGSTASH_AWS_ES_REGION}"
      index => "alias-cadre-job-listener"
    }

    #stdout { codec => rubydebug }
 } else if [@metadata][type] == "package-listener" {
    amazon_es {
      hosts => ["${LOGSTASH_AWS_ES_HOST}"]
      region => "${LOGSTASH_AWS_ES_REGION}"
      index => "alias-cadre-package-listener"
    }

    #stdout { codec => rubydebug }
 } else if [@metadata][type] == "tool-listener" {
    amazon_es {
      hosts => ["${LOGSTASH_AWS_ES_HOST}"]
      region => "${LOGSTASH_AWS_ES_REGION}"
      index => "alias-cadre-tool-listener"
    }

    #stdout { codec => rubydebug }
 }

}
