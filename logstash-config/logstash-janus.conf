# This logstash configuration file reads logs on the janus
# server front end and forwards the log data to AWS ElasticSearch
# service.

input {

  file {
    type => "syslog"
    path => "/var/log/syslog"
    #start_position => "beginning"
    #sincedb_path => "/dev/null"
  }

  file {
    type => "job-listener"
#   path => "/etc/logstash/conf.d/test1.txt"
    path => "/home/ubuntu/janus-job-listener/cadre-janus-job-listener.log"
#   start_position => "beginning"
#   sincedb_path => "/dev/null"

    codec => multiline {
      patterns_dir => ["/etc/logstash/conf.d/patterns"]
      pattern => "^%{LISTENER_DATE}"
      negate => true
      what => "previous"
    }
  }

  file {
    type => "gremlin-log"
#   path => "/etc/logstash/conf.d/test_large.txt"
    path => "/home/ubuntu/janusgraph/logs/gremlin-server.log"
#   start_position => "beginning"
#   sincedb_path => "/dev/null"

    codec => multiline {
      patterns_dir => ["/etc/logstash/conf.d/patterns"]
      pattern => "^%{NONNEGINT}"
      negate => true
      what => "previous"
    }
  }
}

filter {

  if [type] == "syslog" {
    grok {
      # Parse the log message
      match => { "message" => "%{SYSLOGBASE} %{GREEDYDATA:message}" }
      # Use syslog_message created by the previous match instead of message
      overwrite => [ "message" ]
      # Remove unwanted information
      remove_field => ["pid", "host", "logsource", "path"]
    }

    date {
       # Use the time of the log message insted of the time LogStash parsed
       # the message.  Overwrite @timestamp which is the time LogStash parsed
       # the message.
       match => [ "timestamp", "MMM dd HH:mm:ss",
                 "MMM  d HH:mm:ss", "ISO8601" ]
       target => "@timestamp"
    }

    mutate {
      add_field => { "[@metadata][type]" => "%{type}" }
      # Remove the redundant time stamp, as it is now equal to @timestamp
      remove_field => [ "timestamp", "type", "tags", "@version" ]
    }
  } else if [type] == "job-listener" {
    grok {
      patterns_dir => "/etc/logstash/conf.d/patterns"
      match => { "message" => "%{LISTENER_DATE:log_time} \[%{DATA:thread}\] %{WORD:error_severity} %{DATA:component} - %{GREEDYDATA:message}" }
      #match => { "message" => "%{LISTENER_DATE:log_time} \[%{DATA:thread}\] %{WORD:error_severity}  %{DATA:component} - %{GREEDYDATA:message}" }
      # Use syslog_message created by the previous match instead of message
      overwrite => [ "message" ]
    }

    date {
      match => [ "log_time", "yyyy-MM-dd HH:mm:ss,SSS"]
      timezone => "US/Eastern"
      target => "@timestamp"

      remove_field => ["log_time"]
    }

    # Remove useless information, redundant information, and status tags
    mutate {
      add_field => { "[@metadata][type]" => "%{type}" }
      remove_field => [ "path", "host", "type", "@version", "tags" ]
      #remove_field => [ "path", "host", "type", "@version" ]
    }
  } else if [type] == "gremlin-log" {
    grok {
      patterns_dir => "/etc/logstash/conf.d/patterns"
      match => { "message" => "%{LISTENER_DATE:log_time} \[%{DATA:thread}\] %{WORD:error_severity}  %{DATA:component} - %{GREEDYDATA:message}" }
      #match => { "message" => "%{LISTENER_DATE:log_time} \[%{WORD:thread}\]  %{WORD:error_severity} %{DATA:component} - %{GREEDYDATA:message}" }
      #match => { "message" => "%{NONNEGINT:msg_id} \[%{DATA:thread}\] %{WORD:error_severity}  %{DATA:component} - %{GREEDYDATA:message}" }
      overwrite => [ "message" ]
    }

        date {
      match => [ "log_time", "yyyy-MM-dd HH:mm:ss,SSS"]
      timezone => "US/Eastern"
      target => "@timestamp"

      remove_field => ["log_time"]
    }

    if "_grokparsefailure" in [tags] {
      drop {}
    } else {
      mutate {
        add_field => { "[@metadata][type]" => "%{type}" }
        remove_field => [ "path", "host", "type", "@version", "tags" ]
      }
    }
  }
}

output {

  # For amazon_es, aws_access_key_id and aws_secret_access_key
  # are set by environment variables in /etc/default/logstash or
  # /etc/sysconfig/logstash which get read in by way of the logstash
  # daemon configuration file /etc/systemd/system/logstash.service.

  if [@metadata][type] == "syslog" {
    amazon_es {
      hosts => ["${LOGSTASH_AWS_ES_HOST}"]
      region => "${LOGSTASH_AWS_ES_REGION}"
      index => "alias-janus-server-syslog"
    }

#   stdout { codec => rubydebug }
  } else if [@metadata][type] == "job-listener" {
    amazon_es {
      hosts => ["${LOGSTASH_AWS_ES_HOST}"]
      region => "${LOGSTASH_AWS_ES_REGION}"
      index => "alias-janus-server-listener"
    }

#   stdout { codec => rubydebug }
  } else if [@metadata][type] == "gremlin-log" {
    amazon_es {
      hosts => ["${LOGSTASH_AWS_ES_HOST}"]
      region => "${LOGSTASH_AWS_ES_REGION}"
      index => "alias-janus-server-gremlin"
    }

#   stdout { codec => rubydebug }
  }
}
