# This logstash configuration file configures reading of web
# gateway log files and forwarding of log data to the AWS
# ElasticSearch service.

input {

   file {
     type => "syslog"
     path => "/var/log/syslog"
     # For debugging
#    start_position => "beginning"
#    sincedb_path => "/dev/null"
   }

   file {
     type => "apache_access"
     path => "/var/log/apache2/access.log"
     # For debugging
#    start_position => "beginning"
#    sincedb_path => "/dev/null"
   }

   file {
     type => "apache_error"
     path => "/var/log/apache2/error.log"
     # For debugging
#    start_position => "beginning"
#    sincedb_path => "/dev/null"
   }
}


filter {

  if [type] == "syslog" {
    grok {
      # Parse the log message
      match => { "message" => "%{SYSLOGBASE} %{GREEDYDATA:message}" }
      # Use syslog_message created by the previous match instead of message
      overwrite => [ "message" ]
      # Remove unwanted information
      remove_field => ["pid", "host", "logsource", "@version", "path"]
    }

    date {
       # Use the time of the log message insted of the time LogStash parsed
       # the message.  Overwrite @timestamp which is the time LogStash parsed
       # the message.
       match => [ "timestamp", "MMM dd HH:mm:ss",
                 "MMM  d HH:mm:ss", "ISO8601" ]
       target => "@timestamp"
    }

    mutate {
      add_field => { "[@metadata][type]" => "%{type}" }
      # Remove the redundant time stamp, as it is now equal to @timestamp
      remove_field => [ "timestamp", "type", "tags" ]
    }
  } else if [type] == "apache_access" {
    grok {
      # Parse the log message
      # Format:
      #   %h: remote hostname or ip
      #   %l: remote log name (usually a dash)
      #   %u: remote user if request was authenticated
      #   %t: time request was received in format [18/Sep/2011:19:18:28 -0400]
      #   %r: first line of request
      #   %>s: final status of requests that have been internally redirected
      #   %O: bytes sent, including headers
      #   %{Referrer}i: value of Referrer variable
      #   %{User-Agent}i: value of User-Agent variable

      match => { "message" => "%{COMBINEDAPACHELOG}"}
    }

    # Convert timestamp "08/May/2020:17:59:32 +0000" to elastic search form
    date {
      match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z"]
      target => "@timestamp"
    }

    mutate {
      add_field => { "[@metadata][type]" => "%{type}" }

      convert => {
        "response" => "integer"
        "bytes" => "integer"
      }

      gsub => ["agent","\"",""]
      gsub => ["referrer","\"",""]
      remove_field => [ "message", "@version", "path", "host", "timestamp", "type", "tags" ]
    }
  } else if [type] == "apache_error" {

    grok {
      match => { "message" => "%{HTTPD_ERRORLOG}" }
      overwrite => [ "message" ]
    }

    date {
      match => [ "timestamp", "EEE MMM dd HH:mm:ss.SSSSSS yyyy" ]
      target => "@timestamp"
    }

    mutate {
      # Hide type field
      add_field => { "[@metadata][type]" => "%{type}" }
      remove_field => [ "@version", "path", "host", "timestamp", "tid", "pid", "type", "tags" ]
    }
  }
}


output {

  # For amazon_es, aws_access_key_id and aws_secret_access_key
  # are set by environment variables in /etc/default/logstash or
  # /etc/sysconfig/logstash which get read in by way of the logstash
  # daemon configuration file /etc/systemd/system/logstash.service.

  if [@metadata][type] == "syslog" {
    amazon_es {
      hosts => ["${LOGSTASH_AWS_ES_HOST}"]
      region => "${LOGSTASH_AWS_ES_REGION}"
      index => "alias-web-gateway-syslog"
    }

#    stdout { codec => rubydebug }
  } else if [@metadata][type] == "apache_access" {
    amazon_es {
      hosts => ["${LOGSTASH_AWS_ES_HOST}"]
      region => "${LOGSTASH_AWS_ES_REGION}"
      index => "alias-web-gateway-access"
    }

#   stdout { codec => rubydebug }
  } else if [@metadata][type] == "apache_error" {
    amazon_es {
      hosts => ["${LOGSTASH_AWS_ES_HOST}"]
      region => "${LOGSTASH_AWS_ES_REGION}"
      index => "alias-web-gateway-error"
    }

#    stdout { codec => rubydebug }
  }

} 
